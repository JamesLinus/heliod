/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2008 Sun Microsystems, Inc. All rights reserved.
 *
 * THE BSD LICENSE
 *
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer. 
 * Redistributions in binary form must reproduce the above copyright notice, 
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution. 
 *
 * Neither the name of the  nor the names of its contributors may be
 * used to endorse or promote products derived from this software without 
 * specific prior written permission. 
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER 
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <windows.h>
#include <stdio.h>
#include <sys/stat.h>
#include <sys/types.h>

#define BIG_LINE 1024

#define HEADER "/* DO NOT EDIT THIS FILE - it is automatically generated */\n\n"
#define NTERROR_DEFINE "struct _NtError {\n\tint ErrorNumber;\n\tchar *ErrorString;\n" \
    "\tstruct _NtError *next;\n} ;\n\ntypedef struct _NtError NtError;\n\n"

#define START_OF_ARRAY "NtError NtErrorStrings[] = {\n"
#define END_OF_ARRAY "{ 0, NULL }\n};\n"
#define BUFFER_LENGTH 1024

main(int argc, char **argv)
{
    FILE *Output, *Input, *Winsock;
    CHAR Buffer[BUFFER_LENGTH], *ErrorString, *ErrorNumber, *tmp1, *tmp2;
    BOOLEAN cont = FALSE;

    if (argc < 3) {
        fprintf(stderr, "%s: Usage %s InputFile WinsockFile OutputFile\n",
            argv[0], argv[0]);
        exit(1);
    }

    Input = fopen(argv[1], "r");
    if (!Input) {
        fprintf(stderr,"%s:Could not open input file %s\n",
            argv[1]);
        exit(1);
    } 

    Winsock = fopen(argv[2], "r");
    if (!Winsock) {
        fprintf(stderr,"%s:Could not open winsock file %s\n",
            argv[1]);
        exit(1);
    } 

    Output = fopen(argv[3], "w");
    if (!Output) {
        fprintf(stderr,"%s:Could not open output file %s\n",
            argv[2]);
        exit(1);
    }
    
    fprintf(Output, HEADER); 
    fprintf(Output, NTERROR_DEFINE);
    fprintf(Output, START_OF_ARRAY);
    
    while(fgets(Buffer, BUFFER_LENGTH, Input)) {
        if(!strncmp(Buffer, "#define", 7)) {

            ErrorString = strchr(Buffer, ' ');
            ErrorString++;
            tmp1 = ErrorNumber = strchr(ErrorString, ' ');
            ErrorNumber++;
            if (!tmp1)
                continue;
            *tmp1 = '\0';
            while(*ErrorNumber == ' ')
                ErrorNumber++;
            tmp1 = strchr(ErrorNumber, 'L');
            if (!tmp1)
                continue;
            *tmp1 = '\0';
            for (tmp2 = ErrorNumber; *tmp2; tmp2++ ) {
                if (*tmp2 < '0' || *tmp2 > '9') {
                    cont = TRUE;
                    break;
                    
                }
            }
            if (cont) {
                cont = FALSE;
                continue;
            }
            fprintf(Output, "{ %s , \"%s\" },\n", ErrorNumber, ErrorString);
            
        }
    }
    if (!feof(Input)) {
        fprintf(stderr,"%s:Could not read from input file %s: %d\n",
            argv[0], argv[2], errno);
    }  
    while(fgets(Buffer, BUFFER_LENGTH, Winsock)) {
        if(!strncmp(Buffer, "#define", 7) &&
            strchr(Buffer, '(') && strchr(Buffer, 'W')) {

            ErrorString = strchr(Buffer, ' ');
            ErrorString++;
            tmp1 = ErrorNumber = strchr(ErrorString, ' ');
            ErrorNumber++;
            if (!tmp1)
                continue;
            *tmp1 = '\0';
            //while(*ErrorNumber == ' ')
                //ErrorNumber++;
            tmp1 = strchr(ErrorNumber, '+');
            if (!tmp1)
                continue;
            ErrorNumber = ++tmp1;
            tmp1 = strchr(ErrorNumber, ')');
            *tmp1 = '\0';
            for (tmp2 = ErrorNumber; *tmp2; tmp2++ ) {
                if (*tmp2 < '0' || *tmp2 > '9') {
                    cont = TRUE;
                    break;
                    
                }
            }
            if (cont) {
                cont = FALSE;
                continue;
            }
            fprintf(Output, "{ %d , \"%s\" },\n",
                (10000+atoi(ErrorNumber)), ErrorString);
            
        }
    }
    if (!feof(Winsock)) {
        fprintf(stderr,"%s:Could not read from input file %s: %d\n",
            argv[0], argv[2], errno);
    }  
    fprintf(Output, END_OF_ARRAY);
    return 0; 
}
