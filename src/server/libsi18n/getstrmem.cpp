/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2008 Sun Microsystems, Inc. All rights reserved.
 *
 * THE BSD LICENSE
 *
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer. 
 * Redistributions in binary form must reproduce the above copyright notice, 
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution. 
 *
 * Neither the name of the  nor the names of its contributors may be
 * used to endorse or promote products derived from this software without 
 * specific prior written permission. 
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER 
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**************************************************************************/
/* CONFIDENTIAL AND PROPRIETARY SOURCE CODE                               */
/* OF NETSCAPE COMMUNICATIONS CORPORATION                                 */
/*                                                                        */
/* Copyright © 1996,1997 Netscape Communications Corporation.  All Rights */
/* Reserved.  Use of this Source Code is subject to the terms of the      */
/* applicable license agreement from Netscape Communications Corporation. */
/*                                                                        */
/* The copyright notice(s) in this Source Code does not indicate actual   */
/* or intended publication of this Source Code.                           */
/**************************************************************************/

#include <stdio.h>
#include <string.h>

#define COMPILE_STRINGS_IN_MEMORY

static char emptyString[] = "";

#ifdef COMPILE_STRINGS_IN_MEMORY

typedef struct DATABIN {
  const char*    pLibraryName;
  const char**   pArrayOfLibraryStrings;
  unsigned numberOfStringsInLibrary;
  } DATABIN;

#include "getstrmem.h"

#endif

#if 0 /* Example of getstrmem.h */
      /* It is intended that this header file be generated by program dblink */

      #define NUM_BUCKETS 2 /* must be power of 2 */

      /* strings in library libalpha */
      static char* libalpha[] = {
        "",
        "libalpha string 1",
        "libalpha string 2",
        "libalpha string 3",
        "libalpha string 4",
        emptyString };

      /* strings in library libbeta */
      static char* libbeta[] = {
        "",
        "libbeta string 1",
        "libbeta string 2",
        emptyString };

      /* libraries in bucket for hashKey==0 */
      static struct DATABIN bucket0[] = {
        {emptyString, NULL,     0}};

      /* libraries in bucket for hashKey==1 */
      static struct DATABIN bucket1[] = {
        {"libalpha",  libalpha, 5},
        {"libbeta",   libbeta,  3},
        {emptyString, NULL,     0}};

      /* array of buckets */
      static struct DATABIN* buckets[NUM_BUCKETS] = {
        bucket0,
        bucket1 };

#endif /* end of example getstrmem.h */

#define BUCKET_MASK NUM_BUCKETS-1

char*
XP_GetStringFromMemory(const char* strLibraryName, int iToken)
{
  /*
   * In memory model called by XP_GetStringFromDatabase
   * does not use database (nsres, et al.).
   *
   * This function uses hash table for library lookup
   * and direct lookup for string.
   *
   * This function is thread safe.
   */

#ifdef COMPILE_STRINGS_IN_MEMORY

  unsigned hashKey;
  int      found = 0;
  unsigned uToken = iToken;
  const char* cPtr;
  DATABIN* pBucket;

  /* calculate hash key */
  hashKey = 0;
  cPtr = strLibraryName;
  while (*cPtr) {
	hashKey += *(cPtr++);
  }
  hashKey &= BUCKET_MASK;

  /* get bucket for this hash key */
  pBucket = buckets[hashKey];

  /* search overflow buckets */
  while (*(pBucket->pLibraryName)!='\0') {
    if (strcmp(pBucket->pLibraryName,strLibraryName)==0) {
	  found = 1;
	  break;
    }
    pBucket++;
  }

  if (!found) {
    return emptyString;
  }

  if (uToken<=pBucket->numberOfStringsInLibrary) {
      return (char *)(pBucket->pArrayOfLibraryStrings[uToken]);
    } else {
	  /* string token out of range */
      return emptyString;
    }

#else

  return emptyString;

#endif
}
