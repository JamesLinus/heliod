#
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright 2008 Sun Microsystems, Inc. All rights reserved.
#
# THE BSD LICENSE
#
# Redistribution and use in source and binary forms, with or without 
# modification, are permitted provided that the following conditions are met:
#
# Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer. 
# Redistributions in binary form must reproduce the above copyright notice, 
# this list of conditions and the following disclaimer in the documentation 
# and/or other materials provided with the distribution. 
#
# Neither the name of the  nor the names of its contributors may be
# used to endorse or promote products derived from this software without 
# specific prior written permission. 
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER 
# OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

# common rules

# make sure all is first defined rule here
all::

ifndef BUILD_JAVA

ifndef NO_STD_ALL_TARGET
all:: headers compile libraries link
endif # NO_STD_ALL_TARGET

ifndef NO_STD_VPATH
VPATH+=$(OBJDIR)
ifdef JNI_MD_SYSNAME
VPATH+=$(JNI_MD_SYSNAME)
endif
endif

#
# EXE[n]_TARGET,  EXE[n]_OBJS, [ EXE[n]_EXTRA ], [ EXE[n]_LIBS ]
#

_OBJS+=$(CSRCS:.c=.$(OBJ)) $(ASFILES:.s=.$(OBJ)) $(ASFILES:.S=.$(OBJ)) $(CPPSRCS:.cpp=.$(OBJ))

ifdef _OBJS
OBJS+=$(addprefix $(OBJDIR)/,$(_OBJS))
endif # _OBJS

ifndef NO_STD_HEADERS_TARGET
headers::
	@$(MAKE_OBJDIR)
	$(LOOP_OVER_DIRS)
endif # NO_STD_HEADERS_TARGET

ifndef NO_STD_COMPILE_TARGET
compile:: $(GENERATED_FILES) $(OBJS)
	+$(LOOP_OVER_DIRS)
endif # NO_STD_COMPILE_TARGET

ifndef CC_DASH_O
CC_DASH_O=-o 
endif # CC_DASH_O

ifndef AS_DASH_O
AS_DASH_O=-o 
endif # AS_DASH_O

ifndef LD_DASH_O
LD_DASH_O=-o 
endif # LD_DASH_O

ifndef NO_STD_OBJDIR_O_RULE
$(OBJDIR)/%.$(OBJ):%.cpp $(PCH_DEP)
	@$(MAKE_OBJDIR)
	$(PRECC) $(CC) $(CC_FLAGS) $($<_CC_FLAGS) -c \
		\
		$(CC_DASH_O)$@ \
		\
		$<
endif # NO_STD_OBJDIR_O_RULE

ifndef NO_STD_OBJDIR_O_FROM_C_RULE
$(OBJDIR)/%.$(OBJ):%.c
	@$(MAKE_OBJDIR)
	$(PREC) $(C) $(C_FLAGS) -c \
		\
		$(CC_DASH_O)$@ \
		\
		$<
endif # NO_STD_OBJDIR_O_FROM_C_RULE

ifndef NO_STD_OBJDIR_O_FROM_S_RULE
$(OBJDIR)/%.$(OBJ):%.S
	@$(MAKE_OBJDIR)
	$(AS) $(AS_FLAGS) -c \
		\
		$(AS_DASH_O)$@ \
		\
		$<
$(OBJDIR)/%.$(OBJ):%.s
	@$(MAKE_OBJDIR)
	$(AS) $(AS_FLAGS) -c \
		\
		$(AS_DASH_O)$@ \
		\
		$<
endif # NO_STD_OBJDIR_O_FROM_S_RULE

ifdef EXE_TARGET
ifdef EXE_RES
_EXE_RES=$(OBJDIR)/$(EXE_RES).res
endif
_EXE_OBJS:=$(addprefix $(OBJDIR)/,$(EXE_OBJS:=.$(OBJ))) $(EXE_NONPARSED_OBJS) $(_EXE_RES)
_EXE_OUTPUT_FILE:=$(OBJDIR)/$(EXE_TARGET)$(EXE)
$(_EXE_OUTPUT_FILE) : $(_EXE_OBJS)
	$(PRELINK) $(CC) \
		\
		$(LD_DASH_O)$(_EXE_OUTPUT_FILE) \
		\
		$(_EXE_OBJS) $(EXE_EXTRA) $(PRELIB) $(LD_FLAGS) \
		$(EXE_REAL_LIBDIRS) $(EXE_REAL_LIBS) $(LD_LIBS) $(LD_RPATHS) $(SYSTEM_LINK_LIBS) $(PLATFORM_LD_OPTS_EXE)
ifeq ($(BUILD_VARIANT), OPTIMIZED)
ifdef STRIP
	$(STRIP) $(_EXE_OUTPUT_FILE)
endif
endif
endif # EXE_TARGET

ifdef EXE1_TARGET
_EXE1_OBJS:=$(addprefix $(OBJDIR)/,$(EXE1_OBJS:=.$(OBJ))) $(EXE1_NONPARSED_OBJS)
_EXE1_OUTPUT_FILE:=$(OBJDIR)/$(EXE1_TARGET)$(EXE)
$(_EXE1_OUTPUT_FILE): $(_EXE1_OBJS) ; \
	$(PRELINK) $(CC) \
		\
		$(LD_DASH_O)$(_EXE1_OUTPUT_FILE) \
		\
		$(_EXE1_OBJS) $(EXE1_EXTRA) $(PRELIB) $(LD_FLAGS) \
		$(EXE_REAL_LIBDIRS) $(EXE1_REAL_LIBS) $(LD_LIBS) $(LD_RPATHS) $(SYSTEM_LINK_LIBS)
ifeq ($(BUILD_VARIANT), OPTIMIZED)
ifdef STRIP
	$(STRIP) $(_EXE1_OUTPUT_FILE)
endif
endif
endif # EXE1_TARGET

ifdef EXE2_TARGET
_EXE2_OBJS:=$(addprefix $(OBJDIR)/,$(EXE2_OBJS:=.$(OBJ))) $(EXE2_NONPARSED_OBJS)
_EXE2_OUTPUT_FILE:=$(OBJDIR)/$(EXE2_TARGET)$(EXE)
$(_EXE2_OUTPUT_FILE): $(_EXE2_OBJS)
	$(PRELINK) $(CC) \
		\
		$(LD_DASH_O)$(_EXE2_OUTPUT_FILE) \
		\
		$(_EXE2_OBJS) $(EXE2_EXTRA) $(PRELIB) $(LD_FLAGS) \
		$(EXE2_REAL_LIBDIRS) $(EXE2_REAL_LIBS) $(LD_LIBS) $(LD_RPATHS)  $(SYSTEM_LINK_LIBS)
ifeq ($(BUILD_VARIANT), OPTIMIZED)
ifdef STRIP
	$(STRIP) $(_EXE2_OUTPUT_FILE)
endif
endif
endif # EXE2_TARGET

ifdef EXE3_TARGET
_EXE3_OBJS:=$(addprefix $(OBJDIR)/,$(EXE3_OBJS:=.$(OBJ))) $(EXE3_NONPARSED_OBJS)
_EXE3_OUTPUT_FILE:=$(OBJDIR)/$(EXE3_TARGET)$(EXE)
$(_EXE3_OUTPUT_FILE): $(_EXE3_OBJS)
	$(PRELINK) $(CC) \
		\
		$(LD_DASH_O)$(_EXE3_OUTPUT_FILE) \
		\
		$(_EXE3_OBJS) $(EXE3_EXTRA) $(PRELIB) $(LD_FLAGS) \
		$(EXE3_REAL_LIBDIRS) $(EXE3_REAL_LIBS) $(LD_LIBS) $(LD_RPATHS) $(SYSTEM_LINK_LIBS)
ifeq ($(BUILD_VARIANT), OPTIMIZED)
ifdef STRIP
	$(STRIP) $(_EXE3_OUTPUT_FILE)
endif
endif
endif # EXE3_TARGET

ifdef EXE4_TARGET
_EXE4_OBJS:=$(addprefix $(OBJDIR)/,$(EXE4_OBJS:=.$(OBJ))) $(EXE4_NONPARSED_OBJS)
_EXE4_OUTPUT_FILE:=$(OBJDIR)/$(EXE4_TARGET)$(EXE)
$(_EXE4_OUTPUT_FILE): $(_EXE4_OBJS)
	$(PRELINK) $(CC) \
		\
		$(LD_DASH_O)$(_EXE4_OUTPUT_FILE) \
		\
		$(_EXE4_OBJS) $(EXE4_EXTRA) $(PRELIB) $(LD_FLAGS) \
		$(EXE4_REAL_LIBDIRS) $(EXE4_REAL_LIBS) $(LD_LIBS) $(LD_RPATHS) $(SYSTEM_LINK_LIBS)
ifeq ($(BUILD_VARIANT), OPTIMIZED)
ifdef STRIP
	$(STRIP) $(_EXE4_OUTPUT_FILE)
endif
endif
endif # EXE4_TARGET

ifdef EXE5_TARGET
_EXE5_OBJS:=$(addprefix $(OBJDIR)/,$(EXE5_OBJS:=.$(OBJ))) $(EXE5_NONPARSED_OBJS)
_EXE5_OUTPUT_FILE:=$(OBJDIR)/$(EXE5_TARGET)$(EXE)
$(_EXE5_OUTPUT_FILE): $(_EXE5_OBJS)
	$(PRELINK) $(CC) \
		\
		$(LD_DASH_O)$(_EXE5_OUTPUT_FILE) \
		\
		$(_EXE5_OBJS) $(EXE5_EXTRA) $(PRELIB) $(LD_FLAGS) \
		$(EXE5_REAL_LIBDIRS) $(EXE5_REAL_LIBS) $(LD_LIBS) $(LD_RPATHS) $(SYSTEM_LINK_LIBS)
ifeq ($(BUILD_VARIANT), OPTIMIZED)
ifdef STRIP
	$(STRIP) $(_EXE5_OUTPUT_FILE)
endif
endif
endif # EXE5_TARGET

#
# DLL[n]_TARGET, DLL[n]_OBJS, [ DLL[n]_EXTRA ], [ DLL[n]_LIBS ]
#

ifdef DLL_DEF_EXPORT
DLL_DEF_EXPORT_FLAG=/DEF:$(DLL_DEF_EXPORT)
endif

ifdef DLL_TARGET
DLL_REAL_OBJS:=$(addprefix $(OBJDIR)/, $(DLL_OBJS:=.$(OBJ)))
DLL_OUTPUT_FILE:=$(OBJDIR)/$(LIBPREFIX)$(DLL_TARGET).$(DYNAMIC_LIB_SUFFIX)
ifdef USE_MAPFILE
DLL_MAPFILE=$(OBJDIR)/$(LIBPREFIX)$(DLL_TARGET).$(MAPFILE_SUFFIX)
DLL_ADDITIONAL_DEPENDENCIES+=$(DLL_MAPFILE)
endif
ifdef DLL_PLUGIN
ifndef DLL_MAPFILE
DLL_EXTRA+=$(LD_SYMBOLIC)
endif
endif
$(DLL_OUTPUT_FILE): $(DLL_REAL_OBJS) $(DLL_NONPARSED_OBJS) $(DLL_ADDITIONAL_DEPENDENCIES)
	$(CC) $(CC_SHARED_LIB_FLAGS) $(LD_DYNAMIC) \
		\
		$(LD_DASH_O)$(DLL_OUTPUT_FILE) \
		\
		$(DLL_REAL_OBJS) $(DLL_NONPARSED_OBJS) \
                $(DLL_EXTRA) $(PRELIB) $(LD_FLAGS) \
		$(DLL_REAL_LIBS) $(DLL_NONPARSED_LIBS) $(LD_LIBS) $(LD_RPATHS)
ifeq ($(BUILD_VARIANT), OPTIMIZED)
ifdef STRIP
	$(STRIP) $(DLL_OUTPUT_FILE)
endif
endif
endif # DLL_TARGET

ifdef DLL1_TARGET
DLL1_REAL_OBJS = $(addprefix $(OBJDIR)/,$(DLL1_OBJS:=.$(OBJ)))
DLL1_OUTPUT_FILE= $(OBJDIR)/$(LIBPREFIX)$(DLL1_TARGET).$(DYNAMIC_LIB_SUFFIX)
ifdef USE_MAPFILE
DLL1_MAPFILE=$(OBJDIR)/$(LIBPREFIX)$(DLL1_TARGET).$(MAPFILE_SUFFIX)
DLL1_ADDITIONAL_DEPENDENCIES+=$(DLL1_MAPFILE)
endif
ifdef DLL1_PLUGIN
ifndef DLL1_MAPFILE
DLL1_EXTRA+=$(LD_SYMBOLIC)
endif
endif
$(DLL1_OUTPUT_FILE): $(DLL1_REAL_OBJS)  $(DLL1_NONPARSED_OBJS) $(DLL1_ADDITIONAL_DEPENDENCIES)
	$(CC) $(CC_SHARED_LIB_FLAGS) $(LD_DYNAMIC) \
		\
		$(LD_DASH_O)$(DLL1_OUTPUT_FILE) \
		\
		$(DLL1_REAL_OBJS) $(DLL1_NONPARSED_OBJS) \
                $(DLL1_EXTRA) $(PRELIB) $(LD_FLAGS) \
		$(DLL1_REAL_LIBS) $(DLL1_NONPARSED_LIBS) $(LD_LIBS) $(LD_RPATHS)
ifeq ($(BUILD_VARIANT), OPTIMIZED)
ifdef STRIP
	$(STRIP) $(DLL1_OUTPUT_FILE)
endif
endif
endif # DLL1_TARGET

ifdef DLL2_TARGET
DLL2_REAL_OBJS = $(addprefix $(OBJDIR)/,$(DLL2_OBJS:=.$(OBJ)))
DLL2_OUTPUT_FILE= $(OBJDIR)/$(LIBPREFIX)$(DLL2_TARGET).$(DYNAMIC_LIB_SUFFIX)
ifdef USE_MAPFILE
DLL2_MAPFILE=$(OBJDIR)/$(LIBPREFIX)$(DLL2_TARGET).$(MAPFILE_SUFFIX)
DLL2_ADDITIONAL_DEPENDENCIES+=$(DLL2_MAPFILE)
endif
ifdef DLL2_PLUGIN
ifndef DLL2_MAPFILE
DLL2_EXTRA+=$(LD_SYMBOLIC)
endif
endif
$(DLL2_OUTPUT_FILE): $(DLL2_REAL_OBJS)  $(DLL2_NONPARSED_OBJS) $(DLL2_ADDITIONAL_DEPENDENCIES)
	$(CC) $(CC_SHARED_LIB_FLAGS) $(LD_DYNAMIC) \
		\
		$(LD_DASH_O)$(DLL2_OUTPUT_FILE) \
		\
		$(DLL2_REAL_OBJS) $(DLL2_NONPARSED_OBJS) \
                $(DLL2_EXTRA) $(PRELIB) $(LD_FLAGS) \
		$(DLL2_REAL_LIBS) $(DLL2_NONPARSED_LIBS) $(LD_LIBS) $(LD_RPATHS)
ifeq ($(BUILD_VARIANT), OPTIMIZED)
ifdef STRIP
	$(STRIP) $(DLL2_OUTPUT_FILE)
endif
endif
endif # DLL2_TARGET

ifdef DLL3_TARGET
DLL3_REAL_OBJS = $(addprefix $(OBJDIR)/,$(DLL3_OBJS:=.$(OBJ)))
DLL3_OUTPUT_FILE= $(OBJDIR)/$(LIBPREFIX)$(DLL3_TARGET).$(DYNAMIC_LIB_SUFFIX)
ifdef USE_MAPFILE
DLL3_MAPFILE=$(OBJDIR)/$(LIBPREFIX)$(DLL3_TARGET).$(MAPFILE_SUFFIX)
DLL3_ADDITIONAL_DEPENDENCIES+=$(DLL3_MAPFILE)
endif
ifdef DLL3_PLUGIN
ifndef DLL3_MAPFILE
DLL3_EXTRA+=$(LD_SYMBOLIC)
endif
endif
$(DLL3_OUTPUT_FILE): $(DLL3_REAL_OBJS)  $(DLL3_NONPARSED_OBJS) $(DLL3_ADDITIONAL_DEPENDENCIES)
	$(CC) $(CC_SHARED_LIB_FLAGS) $(LD_DYNAMIC) \
		\
		$(LD_DASH_O)$(DLL3_OUTPUT_FILE) \
		\
		$(DLL3_REAL_OBJS) $(DLL3_NONPARSED_OBJS) \
                $(DLL3_EXTRA) $(PRELIB) $(LD_FLAGS) \
		$(DLL3_REAL_LIBS) $(DLL3_NONPARSED_LIBS) $(LD_LIBS) $(LD_RPATHS)
ifeq ($(BUILD_VARIANT), OPTIMIZED)
ifdef STRIP
	$(STRIP) $(DLL3_OUTPUT_FILE)
endif
endif
endif # DLL3_TARGET

ifdef DLL4_TARGET
DLL4_REAL_OBJS = $(addprefix $(OBJDIR)/,$(DLL4_OBJS:=.$(OBJ)))
DLL4_OUTPUT_FILE= $(OBJDIR)/$(LIBPREFIX)$(DLL4_TARGET).$(DYNAMIC_LIB_SUFFIX)
ifdef USE_MAPFILE
DLL4_MAPFILE=$(OBJDIR)/$(LIBPREFIX)$(DLL4_TARGET).$(MAPFILE_SUFFIX)
DLL4_ADDITIONAL_DEPENDENCIES+=$(DLL4_MAPFILE)
endif
ifdef DLL4_PLUGIN
ifndef DLL4_MAPFILE
DLL4_EXTRA+=$(LD_SYMBOLIC)
endif
endif
$(DLL4_OUTPUT_FILE): $(DLL4_REAL_OBJS)  $(DLL4_NONPARSED_OBJS) $(DLL4_ADDITIONAL_DEPENDENCIES)
	$(CC) $(CC_SHARED_LIB_FLAGS) $(LD_DYNAMIC) \
		\
		$(LD_DASH_O)$(DLL4_OUTPUT_FILE) \
		\
		$(DLL4_REAL_OBJS) $(DLL4_NONPARSED_OBJS) \
                $(DLL4_EXTRA) $(PRELIB) $(LD_FLAGS) \
		$(DLL4_REAL_LIBS) $(DLL4_NONPARSED_LIBS) $(LD_LIBS) $(LD_RPATHS)
ifeq ($(BUILD_VARIANT), OPTIMIZED)
ifdef STRIP
	$(STRIP) $(DLL4_OUTPUT_FILE)
endif
endif
endif # DLL4_TARGET

ifdef DLL5_TARGET
DLL5_REAL_OBJS = $(addprefix $(OBJDIR)/,$(DLL5_OBJS:=.$(OBJ)))
DLL5_OUTPUT_FILE= $(OBJDIR)/$(LIBPREFIX)$(DLL5_TARGET).$(DYNAMIC_LIB_SUFFIX)
ifdef USE_MAPFILE
DLL5_MAPFILE=$(OBJDIR)/$(LIBPREFIX)$(DLL5_TARGET).$(MAPFILE_SUFFIX)
DLL5_ADDITIONAL_DEPENDENCIES+=$(DLL5_MAPFILE)
endif
ifdef DLL5_PLUGIN
ifndef DLL5_MAPFILE
DLL5_EXTRA+=$(LD_SYMBOLIC)
endif
endif
$(DLL5_OUTPUT_FILE): $(DLL5_REAL_OBJS)  $(DLL5_NONPARSED_OBJS) $(DLL5_ADDITIONAL_DEPENDENCIES)
	$(CC) $(CC_SHARED_LIB_FLAGS) $(LD_DYNAMIC) \
		\
		$(LD_DASH_O)$(DLL5_OUTPUT_FILE) \
		\
		$(DLL5_REAL_OBJS) $(DLL5_NONPARSED_OBJS) \
                $(DLL5_EXTRA) $(PRELIB) $(LD_FLAGS) \
		$(DLL5_REAL_LIBS) $(DLL5_NONPARSED_LIBS) $(LD_LIBS) $(LD_RPATHS)
ifeq ($(BUILD_VARIANT), OPTIMIZED)
ifdef STRIP
	$(STRIP) $(DLL5_OUTPUT_FILE)
endif
endif
endif # DLL5_TARGET

ifndef OBJDIR_BIN
OBJDIR_BIN=$(OBJDIR)
endif

ifndef OBJDIR_LIB
OBJDIR_LIB=$(OBJDIR)
endif

ifndef OBJDIR_DYNLIB
OBJDIR_DYNLIB=$(OBJDIR)
endif

ifndef OBJDIR_HDR
OBJDIR_HDR=.
endif

ifndef EXPORT_TESTS_DIR
EXPORT_TESTS_DIR=$(MODULE)
endif

ifdef SHIP_ICU_RESOURCES
ifndef BUILD64
SOMETHING_EXPORTED=1
_ICU_RESOURCES=$(addprefix $(OBJDIR)/, $(addsuffix .res, \
               $(SHIP_ICU_RESOURCES)))
SHIP_RESOURCE_FILES+=$(_ICU_RESOURCES)
endif
endif

ifdef SHIP_RESOURCE_FILES
SOMETHING_EXPORTED=1
endif

ifdef SHIP_SAMPLES
SOMETHING_EXPORTED=1
SHIP_SAMPLE_FILES+=$(addprefix $(OBJDIR)/, $(SHIP_SAMPLES))
endif

ifdef SHIP_HEADERS
SOMETHING_EXPORTED=1
SHIP_HEADER_FILES+=$(addprefix $(OBJDIR_HDR)/, $(SHIP_HEADERS))
endif

ifdef EXPORT_HEADERS
SOMETHING_EXPORTED=1
EXPORT_HEADER_FILES+=$(addprefix $(OBJDIR_HDR)/, $(EXPORT_HEADERS))
endif

ifdef SHIP_PUBLIC_BINARIES
SOMETHING_EXPORTED=1
_SHIP_PUBLIC_BINARIES=$(addprefix $(OBJDIR_BIN)/, $(addsuffix $(EXE), $(SHIP_PUBLIC_BINARIES)))
ifeq ($(OS_ARCH),WINNT) 
ifndef SUPPRESS_PDB_FILES
_SHIP_PUBLIC_BINARIES+= $(addprefix $(OBJDIR_BIN)/, $(addsuffix .pdb, $(SHIP_PUBLIC_BINARIES)))
endif
endif # OS==WINNT
_BINARIES+=$(_SHIP_PUBLIC_BINARIES)
SHIP_PUBLIC_BIN_FILES+=$(_SHIP_PUBLIC_BINARIES)
endif # SHIP_PUBLIC_BINARIES

ifdef SHIP_PRIVATE_BINARIES
SOMETHING_EXPORTED=1
_SHIP_PRIVATE_BINARIES=$(addprefix $(OBJDIR_BIN)/, $(addsuffix $(EXE), $(SHIP_PRIVATE_BINARIES)))
ifeq ($(OS_ARCH),WINNT) 
ifndef SUPPRESS_PDB_FILES
_SHIP_PRIVATE_BINARIES+= $(addprefix $(OBJDIR_BIN)/, $(addsuffix .pdb, $(SHIP_PRIVATE_BINARIES)))
endif
endif # OS==WINNT
_BINARIES+=$(_SHIP_PRIVATE_BINARIES)
SHIP_PRIVATE_BIN_FILES+=$(_SHIP_PRIVATE_BINARIES)
endif # SHIP_PRIVATE_BINARIES

ifdef SHIP_PLUGIN_BINARIES
SOMETHING_EXPORTED=1
_SHIP_PLUGIN_BINARIES=$(addprefix $(OBJDIR_BIN)/, $(addsuffix $(EXE), $(SHIP_PLUGIN_BINARIES)))
ifeq ($(OS_ARCH),WINNT) 
ifndef SUPPRESS_PDB_FILES
_SHIP_PLUGIN_BINARIES+= $(addprefix $(OBJDIR_BIN)/, $(addsuffix .pdb, $(SHIP_PLUGIN_BINARIES)))
endif
endif # OS==WINNT
_BINARIES+=$(_SHIP_PLUGIN_BINARIES)
SHIP_PLUGIN_BIN_FILES+=$(_SHIP_PLUGIN_BINARIES)
endif # SHIP_PLUGIN_BINARIES

ifdef EXPORT_BINARIES
SOMETHING_EXPORTED=1
_EXPORT_BINARIES=$(addprefix $(OBJDIR_BIN)/, $(addsuffix $(EXE), $(EXPORT_BINARIES)))
ifeq ($(OS_ARCH),WINNT) 
ifndef SUPPRESS_PDB_FILES
_EXPORT_BINARIES+= $(addprefix $(OBJDIR_BIN)/, $(addsuffix .pdb, $(EXPORT_BINARIES)))
endif
endif # OS==WINNT
_BINARIES+=$(_EXPORT_BINARIES)
EXPORT_BIN_FILES+=$(_EXPORT_BINARIES)
endif # EXPORT_BINARIES

ifdef LOCAL_BINARIES
_LOCAL_BINARIES=$(addprefix $(OBJDIR_BIN)/, $(addsuffix $(EXE), $(LOCAL_BINARIES)))
_BINARIES+=$(_LOCAL_BINARIES)
endif

ifdef EXPORT_TESTS_BINARIES
SOMETHING_EXPORTED=1
_EXPORT_TESTS_BINARIES=$(addprefix $(OBJDIR_BIN)/, $(addsuffix $(EXE), $(EXPORT_TESTS_BINARIES)))
_BINARIES+=$(_EXPORT_TESTS_BINARIES)
EXPORT_TESTS_BIN_FILES+=$(_EXPORT_TESTS_BINARIES)
endif

ifdef EXPORT_TESTS_DYNAMIC_LIBRARIES
SOMETHING_EXPORTED=1
_EXPORT_TESTS_DYNAMIC_LIBRARIES=$(addprefix $(OBJDIR_DYNLIB)/$(LIBPREFIX), \
		   $(addsuffix .$(DYNAMIC_LIB_SUFFIX), $(EXPORT_TESTS_DYNAMIC_LIBRARIES)))
_DYNAMIC_LIBRARIES+=$(_EXPORT_TESTS_DYNAMIC_LIBRARIES)
EXPORT_TESTS_LIB_FILES+=$(_EXPORT_TESTS_DYNAMIC_LIBRARIES)
endif

ifdef EXPORT_TESTS
SOMETHING_EXPORTED=1
EXPORT_TESTS_FILES+=$(EXPORT_TESTS)
endif

ifdef SHIP_LIBRARIES
SOMETHING_EXPORTED=1
_SHIP_LIBRARIES=$(addprefix $(OBJDIR_LIB)/$(LIBPREFIX), $(addsuffix .$(STATIC_LIB_SUFFIX), $(SHIP_LIBRARIES)))
_LIBRARIES+=$(_SHIP_LIBRARIES)
SHIP_LIB_FILES+=$(_SHIP_LIBRARIES)
endif

ifdef EXPORT_LIBRARIES
SOMETHING_EXPORTED=1
_EXPORT_LIBRARIES=$(addprefix $(OBJDIR_LIB)/$(LIBPREFIX), $(addsuffix .$(STATIC_LIB_SUFFIX), $(EXPORT_LIBRARIES)))
_LIBRARIES+=$(_EXPORT_LIBRARIES)
EXPORT_LIB_FILES+=$(_EXPORT_LIBRARIES)
endif

ifdef LOCAL_LIBRARIES
_LOCAL_LIBRARIES=$(addprefix $(OBJDIR_LIB)/$(LIBPREFIX), $(addsuffix .$(STATIC_LIB_SUFFIX), $(LOCAL_LIBRARIES)))
_LIBRARIES+=$(_LOCAL_LIBRARIES)
endif

ifdef SHIP_PUBLIC_DYNAMIC_LIBRARIES
SOMETHING_EXPORTED=1
_SHIP_PUBLIC_DYNAMIC_LIBRARIES=$(addprefix $(OBJDIR_DYNLIB)/$(LIBPREFIX), $(addsuffix .$(DYNAMIC_LIB_SUFFIX), $(SHIP_PUBLIC_DYNAMIC_LIBRARIES)))
ifeq ($(OS_ARCH),WINNT) 
ifndef SUPPRESS_PDB_FILES
_SHIP_PUBLIC_DYNAMIC_LIBRARIES+=$(addprefix $(OBJDIR_DYNLIB)/$(LIBPREFIX), $(addsuffix .pdb, $(SHIP_PUBLIC_DYNAMIC_LIBRARIES)))
endif
SHIP_LIB_FILES+=$(addprefix $(OBJDIR_LIB)/$(LIBPREFIX), $(addsuffix .$(STATIC_LIB_SUFFIX), $(SHIP_PUBLIC_DYNAMIC_LIBRARIES)))
endif # OS==WINNT
SHIP_LIB_FILES+=$(_SHIP_PUBLIC_DYNAMIC_LIBRARIES)
_DYNAMIC_LIBRARIES+=$(_SHIP_PUBLIC_DYNAMIC_LIBRARIES)
endif # SHIP_PUBLIC_DYNAMIC_LIBRARIES

ifdef SHIP_PRIVATE_DYNAMIC_LIBRARIES
SOMETHING_EXPORTED=1
_SHIP_PRIVATE_DYNAMIC_LIBRARIES=$(addprefix $(OBJDIR_DYNLIB)/$(LIBPREFIX), $(addsuffix .$(DYNAMIC_LIB_SUFFIX), $(SHIP_PRIVATE_DYNAMIC_LIBRARIES)))
ifeq ($(OS_ARCH),WINNT) 
ifndef SUPPRESS_PDB_FILES
_SHIP_PRIVATE_DYNAMIC_LIBRARIES+=$(addprefix $(OBJDIR_DYNLIB)/$(LIBPREFIX), $(addsuffix .pdb, $(SHIP_PRIVATE_DYNAMIC_LIBRARIES)))
endif
EXPORT_LIB_FILES+=$(addprefix $(OBJDIR_LIB)/$(LIBPREFIX), $(addsuffix .$(STATIC_LIB_SUFFIX), $(SHIP_PRIVATE_DYNAMIC_LIBRARIES)))
endif # OS==WINNT
SHIP_LIB_FILES+=$(_SHIP_PRIVATE_DYNAMIC_LIBRARIES)
_DYNAMIC_LIBRARIES+=$(_SHIP_PRIVATE_DYNAMIC_LIBRARIES)
endif # SHIP_PRIVATE_DYNAMIC_LIBRARIES

ifdef SHIP_PLUGIN_DYNAMIC_LIBRARIES
SOMETHING_EXPORTED=1
_SHIP_PLUGIN_DYNAMIC_LIBRARIES=$(addprefix $(OBJDIR_DYNLIB)/$(LIBPREFIX), $(addsuffix .$(DYNAMIC_LIB_SUFFIX), $(SHIP_PLUGIN_DYNAMIC_LIBRARIES)))
ifeq ($(OS_ARCH),WINNT) 
ifndef SUPPRESS_PDB_FILES
_SHIP_PLUGIN_DYNAMIC_LIBRARIES+=$(addprefix $(OBJDIR_DYNLIB)/$(LIBPREFIX), $(addsuffix .pdb, $(SHIP_PLUGIN_DYNAMIC_LIBRARIES)))
endif
endif # OS==WINNT
SHIP_PLUGIN_BIN_FILES+=$(_SHIP_PLUGIN_DYNAMIC_LIBRARIES)
_DYNAMIC_LIBRARIES+=$(_SHIP_PLUGIN_DYNAMIC_LIBRARIES)
endif # SHIP_PLUGIN_DYNAMIC_LIBRARIES

ifdef EXPORT_DYNAMIC_LIBRARIES
SOMETHING_EXPORTED=1
_EXPORT_DYNAMIC_LIBRARIES=$(addprefix $(OBJDIR_DYNLIB)/$(LIBPREFIX), $(addsuffix .$(DYNAMIC_LIB_SUFFIX), $(EXPORT_DYNAMIC_LIBRARIES)))
ifeq ($(OS_ARCH),WINNT) 
ifndef SUPPRESS_PDB_FILES
_EXPORT_DYNAMIC_LIBRARIES+=$(addprefix $(OBJDIR_DYNLIB)/$(LIBPREFIX), $(addsuffix .pdb, $(EXPORT_DYNAMIC_LIBRARIES)))
endif
EXPORT_LIB_FILES+=$(addprefix $(OBJDIR_LIB)/$(LIBPREFIX), $(addsuffix .$(STATIC_LIB_SUFFIX), $(EXPORT_DYNAMIC_LIBRARIES)))
endif # OS==WINNT
EXPORT_LIB_FILES+=$(_EXPORT_DYNAMIC_LIBRARIES)
_DYNAMIC_LIBRARIES+=$(_EXPORT_DYNAMIC_LIBRARIES)
endif # EXPORT_DYNAMIC_LIBRARIES

ifdef LOCAL_DYNAMIC_LIBRARIES
_LOCAL_DYNAMIC_LIBRARIES=$(addprefix $(OBJDIR_DYNLIB)/$(LIBPREFIX), \
                         $(addsuffix .$(DYNAMIC_LIB_SUFFIX), \
                                        $(LOCAL_DYNAMIC_LIBRARIES)))
_DYNAMIC_LIBRARIES+=$(_LOCAL_DYNAMIC_LIBRARIES)
endif # LOCAL_DYNAMIC_LIBRARIES

ifndef NO_STD_LIBRARIES_TARGET
libraries:: $(_LIBRARIES) $(_DYNAMIC_LIBRARIES)
	$(LOOP_OVER_DIRS)
endif # NO_STD_LIBRARIES_TARGET

ifndef NO_STD_LINK_TARGET
link:: $(_BINARIES)
	$(LOOP_OVER_DIRS)
endif # NO_STD_LINK_TARGET

ifndef NO_STD_ICU_RESOURCES_TARGET
compile:: $(_ICU_RESOURCES)
$(OBJDIR)/%_root.res: %.properties
	$(GENRB) -d $(OBJDIR) $<

$(OBJDIR)/%.res: %.properties
	$(GENRB) -d $(OBJDIR) $<
endif # NO_STD_ICU_RESOURCES_TARGET

else # BUILD_JAVA

ifdef SHIP_JAR
SOMETHING_EXPORTED=1
endif

ifdef SHIP_WAR
SOMETHING_EXPORTED=1
endif

ifdef SHIP_JAVA_SAMPLES
SOMETHING_EXPORTED=1
endif

ifdef EXPORT_JAR
SOMETHING_EXPORTED=1
endif

_OBJS+=$(JAVA_SRCS:=.class)

ifdef _OBJS
OBJS+=$(addprefix $(OBJDIR)/,$(_OBJS))
endif # _OBJS

endif # BUILD_JAVA

ifdef DIRS
ifndef NO_LOOP_OVER_DIRS
LOOP_OVER_DIRS=	for dir in $(DIRS) ; do \
			( cd $${dir} &&  \
			$(MAKE) MAKEFLAGS='$(MAKEFLAGS) $(EXTRA_MAKEFLAGS)' $@ ) || exit 255 ; \
	 	done
else # NO_LOOP_OVER_DIRS
LOOP_OVER_DIRS= $(ECHO) directory traversal skipped
endif # NO_LOOP_OVER_DIRS
endif # DIRS

ifndef MAKE_OBJDIR
define MAKE_OBJDIR
if test ! -d $(OBJDIR); then $(RM) -rf $(OBJDIR); $(MKDIR) -p $(OBJDIR); fi
endef
endif # MAKE_OBJDIR

ifndef LN_PLATFORM_64_SUBDIR
ifdef PLATFORM_SUBDIR
define LN_PLATFORM_64_SUBDIR
if test ! -h 64; then $(LN) -s $(PLATFORM_64_SUBDIR) 64; fi
endef
endif # PLATFORM_SUBDIR
endif # LN_PLATFORM_64_SUBDIR


####################################
###### PUBLICATION CODE ############
####################################

print_exports::
	$(LOOP_OVER_DIRS)

print_exports::
	@$(ECHO) files to be exported for module $(MODULE):

ifdef SOMETHING_EXPORTED

ifndef NO_STD_PUBLISH_RULE
publish: local_pre_publish pre_publish publish_copy local_post_publish
ifndef NO_PUBLISH_RECURSE
	$(LOOP_OVER_DIRS)
endif # NO_PUBLISH_RECURSE
endif # NO_STD_PUBLISH_RULE

# can be used by local makefiles to prepare for publish:
local_pre_publish::

# can unpack tarfiles, etc.
local_post_publish::

else # SOMETHING_EXPORTED

ifndef NO_STD_PUBLISH_RULE
publish: pre_publish
	@$(ECHO) Nothing to publish. Traversing subdirs
ifndef NO_PUBLISH_RECURSE
	$(LOOP_OVER_DIRS)
endif # NO_PUBLISH_RECURSE
endif # NO_STD_PUBLISH_RULE

endif # SOMETHING_EXPORTED

.PHONY: pre_publish publish publish_copy

#
# _HEADER_FILES
#

ifdef EXPORT_HEADER_FILES
print_exports::
	@$(ECHO) "Exported headers: $(EXPORT_HEADER_FILES)"
publish_copy::
	$(MKDIR_DASH_P) $(INTERNAL_ROOT)/include/$(MODULE)
	$(CP) -f $(EXPORT_HEADER_FILES) $(INTERNAL_ROOT)/include/$(MODULE)
endif # EXPORT_HEADER_FILES

ifdef SHIP_HEADER_FILES
print_exports::
	@$(ECHO) "Shipped headers: $(SHIP_HEADER_FILES)"
publish_copy::
	$(MKDIR_DASH_P) $(WORK_ROOT)/$(INCLUDE_SUBDIR)/$(MODULE)
	$(CP) -f $(SHIP_HEADER_FILES) $(WORK_ROOT)/$(INCLUDE_SUBDIR)/$(MODULE)
endif # SHIP_HEADER_FILES

#
# _LIB_FILES
#

ifdef EXPORT_LIB_FILES
print_exports::
	@$(ECHO) "Exported lib files: $(EXPORT_LIB_FILES)"
publish_copy::
	$(MKDIR_DASH_P) $(INTERNAL_ROOT)/lib$(PLATFORM_SUBDIR_SUFFIX)
	$(CP) -f $(EXPORT_LIB_FILES) $(INTERNAL_ROOT)/lib$(PLATFORM_SUBDIR_SUFFIX)
	cd $(INTERNAL_ROOT)/lib; $(LN_PLATFORM_64_SUBDIR)
endif # EXPORT_LIB_FILES

ifdef EXPORT_TESTS_LIB_FILES
print_exports::
	@$(ECHO) "Test lib files: $(EXPORT_TESTS_LIB_FILES)"
publish_copy::
	$(MKDIR_DASH_P) $(INTERNAL_ROOT)/tests/$(EXPORT_TESTS_DIR)$(PLATFORM_SUBDIR_SUFFIX)
	$(CP) -f $(EXPORT_TESTS_LIB_FILES) $(INTERNAL_ROOT)/tests/$(EXPORT_TESTS_DIR)$(PLATFORM_SUBDIR_SUFFIX)
	cd $(INTERNAL_ROOT)/tests/$(EXPORT_TESTS_DIR); $(LN_PLATFORM_64_SUBDIR)
endif # EXPORT_TESTS_LIB_FILES

ifdef SHIP_LIB_FILES
ifndef PUBLISH_LIB_DIR
PUBLISH_LIB_DIR=$(WORK_ROOT)/$(LIB_SUBDIR)
endif
print_exports::
	@$(ECHO) "Shipped lib files: $(SHIP_LIB_FILES)"
publish_copy::
	$(MKDIR_DASH_P) $(PUBLISH_LIB_DIR)
	$(CP) -f $(SHIP_LIB_FILES) $(PUBLISH_LIB_DIR)
	cd $(PUBLISH_LIB_DIR)/..; $(LN_PLATFORM_64_SUBDIR)
endif # SHIP_LIB_FILES

#
# _BIN_FILES
#

ifdef EXPORT_BIN_FILES
print_exports::
	@$(ECHO) "Exported binaries: $(EXPORT_BIN_FILES)"
publish_copy::
	$(MKDIR_DASH_P) $(INTERNAL_ROOT)/bin$(PLATFORM_SUBDIR_SUFFIX)
	$(CP) -f $(EXPORT_BIN_FILES) $(INTERNAL_ROOT)/bin$(PLATFORM_SUBDIR_SUFFIX)
	cd $(INTERNAL_ROOT)/bin; $(LN_PLATFORM_64_SUBDIR)
endif # EXPORT_BIN_FILES

ifdef EXPORT_TESTS_BIN_FILES
print_exports::
	@$(ECHO) "Test binaries: $(EXPORT_TESTS_BIN_FILES)"
publish_copy::
	$(MKDIR_DASH_P) $(INTERNAL_ROOT)/tests/$(EXPORT_TESTS_DIR)$(PLATFORM_SUBDIR_SUFFIX)
	$(CP) -f $(EXPORT_TESTS_BIN_FILES) $(INTERNAL_ROOT)/tests/$(EXPORT_TESTS_DIR)$(PLATFORM_SUBDIR_SUFFIX)
	cd $(INTERNAL_ROOT)/tests/$(EXPORT_TESTS_DIR); $(LN_PLATFORM_64_SUBDIR)
endif # EXPORT_TESTS_BIN_FILES

ifdef SHIP_PUBLIC_BIN_FILES
ifndef PUBLISH_PUBLIC_BIN_DIR
PUBLISH_PUBLIC_BIN_DIR=$(WORK_ROOT)/$(PUBLIC_BIN_SUBDIR)
endif
print_exports::
	@$(ECHO) "Shipped public binaries: $(SHIP_PUBLIC_BIN_FILES)"
publish_copy::
	$(MKDIR_DASH_P) $(PUBLISH_PUBLIC_BIN_DIR)
	$(CP) -f $(SHIP_PUBLIC_BIN_FILES) $(PUBLISH_PUBLIC_BIN_DIR)
	cd $(PUBLISH_PUBLIC_BIN_DIR)/..; $(LN_PLATFORM_64_SUBDIR)
endif # SHIP_PUBLIC_BIN_FILES

ifdef SHIP_PRIVATE_BIN_FILES
ifndef PUBLISH_PRIVATE_BIN_DIR
PUBLISH_PRIVATE_BIN_DIR=$(WORK_ROOT)/$(PRIVATE_BIN_SUBDIR)
endif
print_exports::
	@$(ECHO) "Shipped public binaries: $(SHIP_PRIVATE_BIN_FILES)"
publish_copy::
	$(MKDIR_DASH_P) $(PUBLISH_PRIVATE_BIN_DIR)
	$(CP) -f $(SHIP_PRIVATE_BIN_FILES) $(PUBLISH_PRIVATE_BIN_DIR)
	cd $(PUBLISH_PRIVATE_BIN_DIR)/..; $(LN_PLATFORM_64_SUBDIR)
endif # SHIP_PRIVATE_BIN_FILES

ifdef SHIP_PLUGIN_BIN_FILES
ifndef PUBLISH_PLUGIN_BIN_DIR
PUBLISH_PLUGIN_BIN_DIR=$(WORK_ROOT)/$(PLUGINS_SUBDIR)/$(MODULE)$(PLATFORM_SUBDIR_SUFFIX)
endif
print_exports::
	@$(ECHO) "Shipped plugin binaries: $(SHIP_PLUGIN_BIN_FILES)"
publish_copy::
	$(MKDIR_DASH_P) $(PUBLISH_PLUGIN_BIN_DIR)
	$(CP) -f $(SHIP_PLUGIN_BIN_FILES) $(PUBLISH_PLUGIN_BIN_DIR)
	cd $(PUBLISH_PLUGIN_BIN_DIR)/..; $(LN_PLATFORM_64_SUBDIR)
endif # SHIP_PLUGIN_BIN_FILES

#
# Auxillary files
#

ifdef EXPORT_TESTS_FILES
print_exports::
	@$(ECHO) "Tests: $(EXPORT_TESTS_FILES)"
publish_copy::
	$(MKDIR_DASH_P) $(INTERNAL_ROOT)/tests/$(EXPORT_TESTS_DIR)
	$(CP) -f $(EXPORT_TESTS_FILES) $(INTERNAL_ROOT)/tests/$(EXPORT_TESTS_DIR)
endif # EXPORT_TESTS_FILES

ifdef SHIP_PLUGIN_HELPER_FILES
ifndef PUBLISH_PLUGIN_HELPER_DIR
PUBLISH_PLUGIN_HELPER_DIR=$(WORK_ROOT)/$(PLUGINS_SUBDIR)/$(MODULE)
endif
print_exports::
	@$(ECHO) "Shipped plugin helper files: $(SHIP_PLUGIN_HELPER_FILES)"
publish_copy::
	$(MKDIR_DASH_P) $(PUBLISH_PLUGIN_HELPER_DIR)
	$(CP) -f $(SHIP_PLUGIN_HELPER_FILES) $(PUBLISH_PLUGIN_HELPER_DIR)
endif # SHIP_PLUGIN_HELPER_FILES

ifdef SHIP_RESOURCE_FILES
ifndef PUBLISH_RES_DIR
PUBLISH_RES_DIR=$(WORK_ROOT)/$(RES_SUBDIR)
endif
print_exports::
	@$(ECHO) "Shipped resource files: $(SHIP_RESOURCE_FILES)"
publish_copy::
	$(MKDIR_DASH_P) $(WORK_ROOT)/$(RES_SUBDIR)
	$(CP) -f $(SHIP_RESOURCE_FILES) $(PUBLISH_RES_DIR)
endif # SHIP_RESOURCE_FILES

ifdef SHIP_SAMPLE_FILES
ifndef PUBLISH_SAMPLE_DIR
PUBLISH_SAMPLE_DIR=$(WORK_ROOT)/$(SAMPLES_SUBDIR)/$(MODULE)
endif
print_exports::
	@$(ECHO) "Shipped sample files: $(SHIP_SAMPLE_FILES)"
publish_copy::
	$(MKDIR_DASH_P) $(PUBLISH_SAMPLE_DIR)
	$(CP) -f $(SHIP_SAMPLE_FILES) $(PUBLISH_SAMPLE_DIR)
endif # SHIP_SAMPLE_FILES

ifndef NO_STD_CLEAN_TARGET
clean::
	$(RM) -f $(OBJS) $(NOSUCHFILE) 
	$(LOOP_OVER_DIRS)
endif # NO_STD_CLEAN_TARGET

ifndef NO_STD_CLOBBER_TARGET
clobber::
ifdef OBJDIR
	$(RM) -rf $(OBJDIR) $(NOSUCHFILE)
endif # OBJDIR
ifeq ($(OS_ARCH),SunOS)
	$(RM) -rf .sb
	$(RM) -rf SunWS_cache        
endif # OS_ARCH=SunOS
	$(LOOP_OVER_DIRS)
endif # NO_STD_CLOBBER_TARGET

cleanup ::
	$(FIND) $(WORK_ROOT) -name CVS | $(XARGS) -n 1 $(RM) -rf $(NOSUCHFILE)
